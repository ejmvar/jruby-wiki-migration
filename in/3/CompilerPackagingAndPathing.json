{"href":"https://kenai.com/api/projects/jruby/features/wiki/pages/CompilerPackagingAndPathing/revisions/3.json","name":"CompilerPackagingAndPathing","number":3,"page_href":"https://kenai.com/api/projects/jruby/features/wiki/pages/CompilerPackagingAndPathing.json","person":"pfussell","description":"Added title, link to home wiki page, minor edits","text":"[[Home|&raquo; JRuby Project Wiki Home Page]] \n=Compiler Packaging and Pathing=\nThis is the packaging and pathing specification for JRuby compiler.\n\n'''Given:'''\n\n* A <tt>baz.rb</tt> file exists in some directory <tt>foo/bar</tt>, which exists under user's home directory.\n\n'''Requirements:'''\n\n* Compilation of <tt>baz.rb</tt should produce <tt>baz.class</tt> in the same location.\n* Java's requirement for unique class names means <tt>baz.class</tt> must have a unique class name.\n* <tt>baz.class</tt> may be executed from locations other than the one from which it was compiled.\n\nSo assume <tt>baz.class</tt> contains a class named <tt>foo.bar.baz</tt>, existing under <tt><nowiki><home>/foo/bar</nowiki></tt>.\n\n* Load path contains <tt>&lt;home&gt;</tt>.\n* Executing <tt>require 'foo/bar/baz'</tt> should pick up the class file and load it.\n* Executing <tt>jruby foo/bar/baz.class</tt> should execute it correctly.\n* Executing <tt>jruby -e \"require 'baz'\"</tt> from within <tt>&lt;home&gt;/foo/bar</tt> should pick it up correctly.\n\nLoad path locations are typically expected by the source; <tt>require</tt>s and such depend on their being correct. If the load path points at <tt>&lt;home&gt;</tt> normally, pointing it at <tt>&lt;home&gt;/foo</tt> instead would likely cause <tt>require</tt>s in <tt>baz</tt> to fail. So:\n* We can reasonably expect that the load path structure is a good representation of a unique class name, and that execution would not expect something more unique. \n* Therefore, a subpath within the load path is a good enough indicator of package for the compiled class.\n* However, load path searching should still be done. If we switch to <tt>foo/bar</tt> and try to require <tt>baz</tt>, it should continue to load. If we try to run <tt>baz</tt> directly, it should continue to load.\n* Therefore, we should continue to use load path searching as the primary mechanism for finding the compiled class file.\n* Therefore, we should also examine the class file directly for the contained class name, rather than expecting it to match package structure.\n\n'''Given that compilation may happen from any arbitrary directory:'''\n\nWe need a way to determine the appropriate load path for a file under compilation. Because load paths may differ at runtime for the script/app in question, we should do three things:\n\n* Provide a command-line means to specify the base dir from which the source is being compiled. This is similar to the requirement in <tt>.java</tt> files to specify a host dir that represents the \"root\" of the path.\n* Default to current directory as the \"root\" of the path, if the filename to be compiled does not contain relative path modifiers and is a subpath under the current directory.\n* If no base is given and there are relative modifiers in the full file path, generate a package name based on the full canonical filename. Perhaps print a warning.\n\n'''Addendums:'''\n\n* For any given file that must use a canonical path containing a device name to generate package name, the device indicator (<tt>C:\\</tt>, <tt>\\\\somehost\\</tt>, etc.) will be considered the root and omitted from the resulting package.\n\n'''A few cases:'''\n\n'''1. Simple Case'''\n:current dir<nowiki>:</nowiki> <tt>C:\\home</tt>\n:file to compile<nowiki>:</nowiki> <tt>C:\\home\\foo\\bar\\baz.rb</tt>, specified as <tt>foo\\bar\\baz.rb</tt>\n:no basedir specified\n\n* filename given has no relative modifiers\n* filename is within a subpath of current directory\n* package generated is <tt>foo.bar</tt>\n* <tt>baz.class</tt> file is placed in <tt>C:\\home\\foo\\bar\\baz.class</tt>\n\n'''2. Second Case'''\n:current dir<nowiki>:</nowiki> <tt>C:\\home2</tt>\n:file to compile<nowiki>:</nowiki> <tt>C:\\home\\foo\\bar\\baz.rb</tt>, specified as <tt>..\\home\\foo\\bar\\baz.rb</tt>\n:no basedir specified\n\n* filename has relative elements\n* canonical path is <tt>C:\\home\\foo\\bar\\baz.rb</tt>\n* package generated is <tt>home.foo.bar</tt>\n\n'''3. Third Case'''\n:current dir<nowiki>:</nowiki> <tt>C:\\home2</tt>\n:file to compile<nowiki>:</nowiki> <tt>C:\\home\\foo\\bar\\baz.rb</tt>, specified as<tt>C:\\home\\foo\\bar\\baz.rb</tt>\n:basedir<nowiki>:</nowiki> <tt>C:\\home</tt>\n\n* basedir is specified\n* target file is in a subpath of basedir with no relative modifiers\n* package and result same as in (1) Simple Case above\n\n'''Execution cases that should succeed in loading a<tt> baz.class</tt>, given any of the results above''\n\n'''Case 1''\n:load path contains <tt><nowiki>C:\\home</nowiki></tt>\n:<tt>jruby -e \"require 'baz'\"</tt>\n\n'''Case 2'''\n:load path contains <tt>C:\\home2</tt>\n:current dir is <tt>C:\\home2</tt>\n:<tt>jruby -e \"require '../home/foo/bar/baz'\"</tt>\n\n'''Case 3'''\n:current dir is <tt>C:\\home2</tt>\n:<tt>jruby ../home/foo/bar/baz.class</tt>\n","created_at":"2009-07-31T23:27:30Z","content_type":"application/vnd.com.kenai.page.revision+json"}