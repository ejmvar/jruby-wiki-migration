{"href":"https://kenai.com/api/projects/jruby/features/wiki/pages/JRubyOnRailsWithGlassfishGem/revisions/3.json","name":"JRubyOnRailsWithGlassfishGem","number":3,"page_href":"https://kenai.com/api/projects/jruby/features/wiki/pages/JRubyOnRailsWithGlassfishGem.json","person":"olecr","description":"","text":"= JRuby on Rails with Glassfish gem =\n\n=== Prerequisites ===\n'''JRuby 1.3.1 or newer'''\n\nI suggest you install it in /opt/jruby-1.3.1 and symlink /opt/jruby to /opt/jruby-1.3.1 for future convenience.\n\n # cd /opt && curl -O http://url.to/jruby-1.3.1.tar.gz\n # tar xzvf jruby-1.3.1.tar.gz\n # ln -s jruby-1.3.1 jruby\n\n'''Glassfish gem by Arun Gupta'''\n\n $ gem i glassfish\n\nIf you install glassfish in userland (as non-root user), you should for your own convenience add ~/.gem/jruby/1.8/bin to your PATH:\n\nYou should also have JRuby in your path. If you install glassfish as root, the glassfish bin will by default be installed in the JRuby bin directory.\n\n $ export JRUBY_HOME=/opt/jruby \n $ export PATH=~/.gem/jruby/1.8/bin:$JRUBY_HOME/bin:$PATH\n\nI recommend putting something this in your .bashrc so it's set whenever you log in.\n\n=== Configure your glassfish instance for your Rails Application ===\n\n $ cd /path/to/rails-app\n $ jruby -S gfrake config         # Sets up initial config/glassfish.yml\n\nNow configure the instance to your liking. For instance:\n\n<pre name=\"yaml\">\n environment: production\n http:\n    port: 3000\n    contextroot: /\n\n log:\n    # Logging level. Log level 0 to 7. 0:OFF, 1:SEVERE, 2:WARNING, 3:INFO (default), 4:FINE, 5:FINER, 6:FINEST, 7:ALL.\n    log-level: 2\n\n jruby-runtime-pool:\n    initial: 1\n    min: 1\n    max: 1\n\n daemon:\n    enable: true\n    pid: tmp/pids/glassfish-production.pid\n    jvm-options: -server -Xmx2500m -Xms64m -XX:PermSize=256m -XX:MaxPermSize=256m -XX:NewRatio=2 -XX:+DisableExplicitGC -Dhk2.file.directory.changeIntervalTimer=6000\n</pre>\n\n'''Running the application'''\n\nRunning your glassfish application server is very simple:\n $ jruby -S glassfish \n\nThe application is started with the Akuma wrapper, which by default exits when passed a SIGINT (2) (default value of ''kill''). For instance:\n $ kill `cat tmp/pids/glassfish-production.pid`  \n\n===Integrating glassfish gem with Solaris Management Facility (SMF)===\n\nIn Solaris 10 and OpenSolaris, you get an excellent service management facility called SMF which you can easily configure to run your applications on startup (and much more). It can be compared with Linux' init.rd / rc.d, but is much more powerful (out of scope).\n\nImporting an application into SMF is not so trivial for first time users, so here is a brief description.\n\nFirst off you need to define a manifest. This is done with a simple XML file. Underneath you will find a manifest with support of two instances or rails applications. Modify these to your liking. I usually prefer to run applications with a non-root-user. I have not included ACLs, and tried to minimize the complexity in the example... I usually recommend placing webapplications such as rails somewhere under /var. In the example I use /var/apps, I also use i.e. /var/rails, etc, but you can place them in your home directory if you please. (Due to Wiki Markup the XML is not indented):\n\n<pre name=\"xml\">\n<?xml version='1.0'?>\n<!DOCTYPE service_bundle SYSTEM '/usr/share/lib/xml/dtd/service_bundle.dtd.1'>\n<service_bundle type='manifest' name='glassfish-gem'>\n  <service name='network/glassfish-gem' type='service' version='0'>\n    <dependency name='fs' grouping='require_all' restart_on='none' type='service'>\n      <service_fmri value='svc:/system/filesystem/local'/>\n    </dependency>\n    <dependency name='net' grouping='require_all' restart_on='none' type='service'>\n      <service_fmri value='svc:/network/loopback'/>\n    </dependency>\n    <dependent name='glassfish-gem_multi-user' restart_on='none' grouping='optional_all'>\n      <service_fmri value='svc:/milestone/multi-user'/>\n    </dependent>\n    <exec_method name='start' type='method' exec='/opt/jruby/bin/glassfish' timeout_seconds='60' />\n    <exec_method name='stop' type='method' exec=':kill' timeout_seconds='60' />\n    <!-- INSTANCES -->        \n    <instance name='my-railsapp_production' enabled='false'>\n      <method_context working_directory='/var/apps/my-railsapp/development/my-railsapp'>\n        <method_credential user='railsuser' group='daemon' />\n        <method_environment>\n          <envvar name=\"PATH\" value=\"/opt/jruby/bin:/usr/bin:/bin\" />\n        </method_environment>\n      </method_context>\n    </instance>\n    <instance name='MYRAILSAPP_ENVIRONMENT' enabled='false'>\n      <method_context working_directory='/FULL/PATH/TO/MY/RAILS/APP/ENVIRONMENT'>\n        <method_credential user='RUNASTHISUSER' group='RUNASTHISGROUP' />\n        <method_environment>\n          <envvar name=\"PATH\" value=\"/PATH/TO/JRUBY/bin:/usr/bin:/bin\" />\n        </method_environment>\n      </method_context>\n    </instance>\n  </service>\n</service_bundle>\n</pre>\n\n'''Import the manifest''' \n $ pfexec svccfg validate config/glassfish-gem.smf.xml\n $ pfexec svccfg import config/glassfish-gem.smf.xml\n\n'''Start your appserver'''\n $ pfexec svcadm enable glassfish-gem:my-railsapp_production\n\n===Apache 2.2 Frontend=== \n\nOn OpenSolaris you can install Apache 2.2 with IPS:\n\n # pkg install SUNWapch22\n\nOn Ubuntu/Debian Linux, you would use apt: (TODO: verify package name on Ubuntu/Debian)\n \n# aptitude install apache2.2\n\nThis example commands also refer to Solaris. You configure Apache 2.2. the same way in other OSes, but paths to configurations may vary. For instance on Debian/Ubuntu, apache config files are placed in ''/etc/apache2/sites-available/MY-CONFIG-FILE'' and these are enabled by a symlink in ''/etc/apache2/sites-enabled'' to the config file.\n\nFile ''/etc/apache2/2.2/sites/myrailsapp.jruby.org''\n\n <VirtualHost *:80>\n\n ServerName myrailsapp.jruby.org\n DocumentRoot /var/apps/my-railsapp/production/my-railsapp/public\n <Directory /var/apps/my-railsapp/production/my-railsapp/public>\n  Options FollowSymLinks\n  AllowOverride All\n  Order allow,deny\n  Allow from all\n </Directory>\n <Proxy balancer://myrailsapp>\n  BalancerMember http://127.0.0.1:3000\n </Proxy>\n\n ProxyPass / balancer://myrailsapp/\n CustomLog /var/log/apache2/myrailsapp_production_apache_access_log combined\n\n </VirtualHost>\n\nSince I place my virtual hosts in separate files, I need to add include to these at the bottom of the main configuration file ''/etc/apache2/2.2/httpd.conf''. If you haven't already configured your Apache server to use Virtual Hosts, you may have to add NameVirtualHost to your configuration:\n\n NameVirtualHost *:80\n Include /etc/apache2/2.2/sites/*\n\nNow just enable (or restart your apache 2.2 server) \n $ pfexec svcadm enable apache22 \n $ pfexec svcadm restart apache22\n\nTODO: Nginx frontend, Linux init.rd start/stop script. Formatting","created_at":"2009-07-01T19:01:41Z","content_type":"application/vnd.com.kenai.page.revision+json"}