{"href":"https://kenai.com/api/projects/jruby/features/wiki/pages/DifferencesBetweenMriAndJruby/revisions/9.json","name":"DifferencesBetweenMriAndJruby","number":9,"page_href":"https://kenai.com/api/projects/jruby/features/wiki/pages/DifferencesBetweenMriAndJruby.json","person":"pfussell","description":"Minor formatting edits","text":"[[Home|&raquo; JRuby Project Wiki Home Page]]\n<h1>Differences Between MRI And JRuby</h1>\nAlthough ideally [http://en.wikipedia.org/wiki/Ruby_MRI MRI] and JRuby would behave 100% the same in all situations, there are some minor differences. Some differences are due to bugs, and those are not reported here. This page is for differences that are not bugs.\n\n__TOC__\n\n== Native C Extensions==\nJRuby cannot run native C extensions.  Popular libraries have all generally been ported to Java Native Extensions.  Also, now that [http://kenai.com/projects/ruby-ffi/pages/Home FFI] has become a popular alternative to binding to C libraries, using it obviates the need to write a large chunk of native extensions.\n\n== Continuations ==\nJRuby does not support [http://www.intertwingly.net/blog/2005/04/13/Continuations-for-Curmudgeons continuations] (<tt>Kernel.callcc</tt>).\n\n== Invoking external processes ==\nOn Microsoft Windows, JRuby is a little smarter when launching external processes. If the executable file is not a binary executable (<tt>.exe</tt>), MRI requires you give the file suffix as well, but JRuby manages without it.\n\nFor example, say you have file <tt>foo.bat</tt> on your PATH and want to run it. \n\n system( 'foo' ) # works on JRuby, fails on MRI\n system( 'foo.bat' ) # works both in JRuby and MRI\n\n== Fork is not implemented ==\nJRuby doesn't implement <tt>fork()</tt> on any platform, including those where <tt>fork()</tt> is available in MRI.\n\n== Native Endian is Big Endian ==\nSince the JVM presents a ''compatible'' CPU to JRuby, the ''native'' endianness of JRuby is Big Endian. This does matter for operations that depend on that behavior, like <tt>String.pack()</tt> and <tt>Array.unpack()</tt> for formats like <tt> I</tt>, <tt> i</tt>, <tt> S</tt>, and <tt> s</tt>.\n\n== Time precision ==\nSince it is not possible to obtain <tt>usec</tt> precision under a JVM, <tt>Time.now.usec</tt> cannot return values with microsecond precision.\n\n'''Example:'''\n\n > Time.now.usec\n => 582000\n\nKeep this in mind when counting on <tt>usec</tt> precision in your code.\n","created_at":"2009-06-12T23:34:14Z","content_type":"application/vnd.com.kenai.page.revision+json"}