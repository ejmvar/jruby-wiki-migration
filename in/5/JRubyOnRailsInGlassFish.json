{"href":"https://kenai.com/api/projects/jruby/features/wiki/pages/JRubyOnRailsInGlassFish/revisions/5.json","name":"JRubyOnRailsInGlassFish","number":5,"page_href":"https://kenai.com/api/projects/jruby/features/wiki/pages/JRubyOnRailsInGlassFish.json","person":"pfussell","description":"Added title and links at top, plus edits","text":"[[Home|&raquo; JRuby Project Wiki Home Page]] &nbsp; &nbsp; [[JRubyOnRails#Glassfish_v3_Deployment|&raquo; JRuby on Rails: Glassfish V3 Deployment]]\n<h1>JRuby and Glassfish</h1>\n[https://glassfish.dev.java.net Glassfish] is an open source Java EE 5 application server. Java EE is a long tested deployment environment and by combining the benefits of GlassFish with JRuby, we should be able to provide the best deployment environment for Rails applications. Here are some of the benefits of using GlassFish as the deployment environment for JRuby on Rails applications :\n* Use the time tested Java EE deployment platform\n* Avoid the complex Mongrel based deployment environment that one has to use to deploy Rails application.\n* With the availability of [[Goldspike]] one can deploy a war file of your Rails application directly to a GlassFish instance.\n* Java EE and Ruby-on-Rails applications can be easily integrated in one container. This allows to host JRuby-on-Rails applications in organizations who have already made investment in Java EE.\n* Rails applications can certainly benefit from the out-of-the-box clustering and high-availability support provided by GlassFish.\n* Reuse your database connections by using the database connection pooling mechanism provided by GlassFish.\n* Last, but not the least, JRuby-on-Rails can leverage the extensive set of Java libraries. \n\nRead details about why GlassFish is a preferred development & deployment environment for deploying Rails applications in an article at [http://developers.sun.com/appserver/reference/techart/rails_gf/ Rails powered by GlassFish Application Server].\n\n__TOC__\n\n== Glassfish v2 ==\nIn GlassFish v2 we currently support the war mode of deployment for your JRuby on Rails applications. The war can be created from your existing Rails applications by using [[Warbler]].\n\n=== Setup ===\nRefer to the section titled \"GlassFish V2\" of the [http://wiki.glassfish.java.net/Wiki.jsp?page=GettingStartedGuide Getting Started Guide]. <br/>At the end of these steps ensure that you have the following environment variables defined :\n GLASSFISH_ROOT - pointing to the directory where GlassFish V2 is installed\n JRUBY_HOME     - the jruby version which would point to $GLASSFISH_ROOT/jruby/jruby-1_0_3/jruby-1.0.3.\n PATH           - add $GLASSFISH_ROOT/bin and $JRUBY_HOME/bin to your existing PATH environment variable.\n\n=== Create a simple hello application ===\nFor those of you would like to deploy their own JRuby on Rails application, skip this section and refer to the next section titled \"How to deploy JRuby on Rails applications\".\n\nBelow you would find steps that would help you create a very simple JRuby on Rails \"hello\" application using the JRuby version that you have installed using the steps mentioned in the \"Setup\" section above.\n<pre>\ncd $GLASSFISH_ROOT/jruby/samples\njruby -S rails hello\njruby script/generate controller say message       ( to create a controller \"say\" with a view \"message\" )\n</pre>\n\n=== How to deploy JRuby on Rails applications ===\nLet us see how we could deploy this application to GlassFish v2 in both the '''Standalone Mode''' and '''Shared Mode'''. In the instructions listed below change the directory name if you are trying to deploy your own JRuby on Rails application.\n\nIf you already have a war file of your JRuby on Rails application (created using Warbler or Goldspike) then you could directly refer to the section \"To deploy the Rails application\".\n\n==== Standalone Mode ====\n\n* Go the Rails application directory :\n<pre>\ncd $GLASSFISH_ROOT/jruby/samples/hello\n$GLASSFISH_ROOT/lib/ant/bin/ant -f $GLASSFISH_ROOT/jruby/install.xml create-standalone\n</pre>\n \nYou would now find a WEB-INF directory under \"hello\" sample directory which would contain '''web.xml''' and 2 directories '''lib''' and '''gems'''\n\n* Before we do a directory deployment of the sample to Glassfish, ensure that the GlassFish application server is running :\n<pre>\ncd ..\nasadmin start-domain \n</pre>\n\n'''Note''' : If the application server is already running the command safely exits\n\nTo deploy the Rails application :\n<pre>\ncd $GLASSFISH_ROOT/jruby/samples\nasadmin deploy hello\n</pre>\n\n* Access the following URLs in a browser : \nhttp://localhost:8080/hello/say/message<br/>\nhttp://localhost:8080/hello <br/>\n\n==== Shared Mode ====\n\nFor having an application deployed in shared mode, first ensure that you have followed the \"Post Installations\" of the [http://wiki.glassfish.java.net/Wiki.jsp?page=GettingStartedGuide Getting Started Guide]. Please note that the steps have to done only once for a GlassFish installation.\n            \nYou would now find a WEB-INF directory under \"hello\" sample directory which would just contain '''web.xml'''\n\n* To deploy the Rails application :\n<pre>\ncd $GLASSFISH_ROOT/jruby/samples/hello\n$GLASSFISH_ROOT/lib/ant/bin/ant -f $GLASSFISH_ROOT/jruby/install.xml create-shared\n</pre>\n\n* Access the following URLs in a browser : \nhttp://localhost:8080/hello/say/message<br/>\nhttp://localhost:8080/hello<br/>\n\n== V2 On Windows ==\n\nAre you deploying on Glassfish on Windows?  Well before you do think long and hard.  Windows brings with it a unique set of challenges.  First off the Jruby team admittedly has not devoted as much time as they would like testing on the Windows platform.  Having said that, I've found that they have generally done a good job but from time to time we have found issues.  So I thought I could share some of the issues we've run into and how we've worked around them.\n\n=== Windows likes to lock files ===\nIf you are new to windows, it is worth knowing that windows likes to \"lock\" files on you.  What do I mean by this?  Well when you go to delete a file or move it or change it windows sometimes tells you that \"the file is in use.\"  (Sometimes it doesn't tell you this).  DON'T IGNORE this message.  When we redeploy our war file we always get : \"The file jnidispatch.dll is in use and wasn't overwritten\".  You can safely ignore this if you haven't updated your version of jruby.  But if you have.  You should :\n* undeploy your app\n* stop your domain\n* start your domain\n* deploy the new version of your app\n\nWe ran into lots of problems on this.\n\n=== Casing in may not matter in Windows but it does in Glassfish ===\nWhen deploying a war file via script (we layered ruby over the asadmin command set and did our deploys with rake), if you deploy your war file as such:\n<pre>\n  asadmin deploy \"MyApp.war\"\n</pre>\nMake sure if you undeploy your script you are undeploying \"MyApp\" and not myApp.  Apparently it doesn't matter if the casing on your War file is myapp.war... it really only matters what you typ into your deploy step.  (if you are coming from linux you probably are a guru with casing already)\n\n=== Make sure you tune your Glassfish JVM parameters! ===\nCan't stress this enough (and this doesn't necessarily apply just to windows).  Take the time to profile your application under load and at steady state and find the right set of JVM parameters that will make your app sing.  Glassfish can really handle a heavy load.  But you have to TUNE TUNE TUNE.\n\n*Here is a subset of our JVM options in our domain xml:\n<pre>\n        <jvm-options>-XX:SurvivorRatio=2</jvm-options>\n        <jvm-options>-XX:MaxPermSize=192m</jvm-options>\n        <jvm-options>-server</jvm-options>\n        <jvm-options>-Xmx1000m</jvm-options>\n        <jvm-options>-Xms1000m</jvm-options>\n        <jvm-options>-XX:NewRatio=2</jvm-options>\n\t<jvm-options>-Djavax.net.ssl.sessionCacheSize=10000</jvm-options>\n</pre>\n\n''' NOTE ''' the -server option makes a big difference.\n\n=== Beware the URLs ===\nThis is also not specifically a windows issue, but GF v2 doesn't like colons (:) in URLs.  We have some REST based web services, and we had some resources that had colons in the resource IDs.  We ended up having to code around that.  (FWIW: I believe that V3 and Tomcat don't have this issue).\n\n=== Are you using SSL ? ===\nI would recommend fronting your app server with something like Apache and having it handle the SSL stuff.  We didn't do that and ran into lots of issues. \n\nSetting up SSL was pretty straightforward.  However we encountered some odd issues.  First off, under load we run out of memory.  That's not good.  Diagnosing the problem with Jconsole heap dumps and a java profiler showed us that we had a Cache for the SslSessionContextImpl softreferences (and the references didn't point to anything) that was growing unbounded.   From looking at the source code of the class, it appears that there is a default timeout to clean up this cache that's 24hours.  I couldn't find a way to change the timeout.  But I did find a way to limit the size of the cache. (see the last JVM-OPTION in the list above, the one that sets the ssl.sessionCacheSize).\n\nAfter setting this, I thought I was out of the woods.  I was handling 400 simultaneous users under a supremely heavy load, the memory was holding great, I knew that when I upgraded to rails 2.2.2+ I'd be able to handle even more.  I was happy.  Until my app crashed because... windows ran out of nonpaged pool memory.  Why? Why? Why?  Come to find out, this is the problem we were seeing [http://docs.sun.com/app/docs/doc/820-3530/gfqse?l=fr)&a=view Win 2k3 non paged pool].  Well changing the blocking characteristic to true for Grizzly seems to me that we are not going to be able to handle as much load.  But it appears to be stopping the nonpaged pool leak.  I only applied the fix to my SSL listener as we had never seen this problem before switching to SSL.\n\n== GlassFish v3 ==\nGlassFish V3 is the next major release of the GlassFish application server with the focus on modularization, enablement of non Java EE containers, and embedability. As part of GlassFish V3 we have created a gem which would help users to launch their Ruby on Rails (ROR) applications embedded within the JRuby VM space. \n\n=== Setup ===\nRefer to the the section titled \"GlassFish V3\" of the [http://wiki.glassfish.java.net/Wiki.jsp?page=GettingStartedGuide Getting Started Guide]. <br/>At the end of these steps ensure that you have the following environment variables are defined :\nJRUBY_HOME     - the jruby version.\nPATH           - add $JRUBY_HOME/bin to your existing PATH environment variable.\n\n=== Sample Application ===\nRefer to the instructions provided in the \"Sample Application\" section of GlassFish V2 to create a very simple \"hello\" application. The directory name where you create the application would be different. Again for users who would like to use their own application please feel free to do so.\n\n==== How to deploy JRuby on Rails applications ====\nTo deploy a Rails application with GlassFish v3 gem :\n\n<pre>\ncd <directory_that_contains_the_hello_application>\njruby -S glassfish_rails hello\n</pre>\n\nThat's it! You would see an output similar to the one listed below in the console where you started the Gem:\n<pre>\nJan 4, 2008 3:35:52 PM com.sun.grizzly.standalone.StaticResourcesAdapter <init>\nINFO: New Servicing page from: /Users/pramodgopinath/jruby-1.0.3/bin/hello/public\nJan 4, 2008 3:36:00 PM com.sun.enterprise.v3.server.AppServerStartup run\nINFO: Startup service : Application Loader\nJan 4, 2008 3:36:00 PM com.sun.enterprise.v3.server.AppServerStartup run\nINFO: Startup service : Grizzly on port 8080\nJan 4, 2008 3:36:00 PM com.sun.enterprise.v3.server.AppServerStartup run\nINFO: Glassfish v3 started in 8567 ms\n</pre>\nThe application is deployed and ready to accept requests. \n\nUse the following urls to check out the application : <br/>\nhttp://localhost:8080/hello<br/>\nhttp://localhost:8080/hello/say/message<br/>\n\n== Success Stories ==\n# [http://blogs.sun.com/arungupta/entry/jruby_and_glassfish_v2_another WorldxChange Communication NZ]\n# [http://blogs.sun.com/arungupta/entry/jruby_on_rails_deployed_on mediacast.sun.com]\n\n== External Links ==\n[http://wiki.glassfish.java.net/Wiki.jsp?page=JRuby GlassFish JRuby Wiki]<br/>\n[http://developers.sun.com/appserver/reference/techart/rails_gf/ Rails powered by GlassFish Application Server]<br/>\n[https://glassfish.dev.java.net/servlets/SummarizeList?listName=dev Email dev@glassfish.dev.java.net alias]to discuss problems/issues with GlassFish deployments of JRuby on Rails applictions<br/>\n","created_at":"2009-07-03T00:52:09Z","content_type":"application/vnd.com.kenai.page.revision+json"}