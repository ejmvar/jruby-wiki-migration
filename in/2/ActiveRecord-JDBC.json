{"href":"https://kenai.com/api/projects/jruby/features/wiki/pages/ActiveRecord-JDBC/revisions/2.json","name":"ActiveRecord-JDBC","number":2,"page_href":"https://kenai.com/api/projects/jruby/features/wiki/pages/ActiveRecord-JDBC.json","person":"pfussell","description":"Added link to wiki home page, minor edits","text":"[[Home|&raquo; JRuby Project Wiki Home Page]]\n<h1>ActiveRecord-JDBC Database Support</h1>\nActiveRecord-JDBC 0.9.1 supports normal AR operations and basic migrations for the following databases:\n* MySQL\n* PostgreSQL\n* SQLite3 (except <tt>change_column</tt>)\n* Oracle\n* HSQLDB (except <tt>migrations</tt> and <tt>habtm</tt> at least.)\n* H2\n* Microsoft SQL Server (except for <tt>change_column_default</tt>)\n* DB2 (except <tt>change_column</tt>, <tt>change_column_default</tt>, <tt>rename_column</tt>, <tt>remove_column</tt>, <tt>add_index</tt>, <tt>remove_index</tt>, and <tt>rename_table</tt>)\n* Derby (except <tt>change_column</tt>, <tt>change_column_default</tt>, <tt>remove_column</tt>, <tt>rename_column</tt>)\n* FireBird (except <tt>change_column_default</tt> and <tt>rename_column</tt>)\n\n==Usage==\nHere's a walkthrough for MySQL in ultra-condensed form:\n\n'''1.''' Grab a JRuby release from [http://jruby.org/download JRuby Downloads] and unpack it\n\n'''2.''' Set up path for JRuby\n\n      export PATH=$PATH:[jruby-dir]/bin\n\n'''3.''' Install Rails\n\n      jruby -S gem install rails\n\n'''4.''' Install ActiveRecord-JDBC for MySQL (see [http://jruby-extras.rubyforge.org/activerecord-jdbc-adapter the documentation] for other options). This will also install the dependent gem activerecord-jdbc-adapter.\n\n      jruby -S gem install activerecord-jdbcmysql-adapter\n\n:You should see something like the following:\n\n    Successfully installed activerecord-jdbc-adapter-0.9.1\n    Successfully installed activerecord-jdbcmysql-adapter-0.9.1\n\n'''5.''' Generate a Rails App\n\n      rails ~/testapp --database mysql\n\n'''6.''' Go to the app\n\n      cd ~/testapp\n\n'''7.''' If you're using Rails 2.0 modify <tt>database.yml</tt> by prepending <tt>jdbc</tt> to the adapter name. For PostgreSQL, you'll need to add the <tt>host</tt> parameter as well. If you're NOT using Rails 2.0, don't modify your <tt>database.yml</tt> file.\n\n'''ActiveRecord-JDBC version 0.9.0:'''\n      #SQLite3\n      development:\n        adapter: jdbcsqlite3\n        url: jdbc:sqlite:test.db # path to sqlite3 dbfile\n\n'''ActiveRecord-JDBC version 0.9.1:'''\n      #SQLite3\n      development:\n        adapter: jdbcsqlite3\n        database: db/development.db\n\n      #MYSQL\n      development:\n        adapter: jdbcmysql\n        encoding: utf8\n        database: testapp_development\n        username: root\n        password:\n\n      #POSTGRES\n      development:\n        adapter: jdbcpostgresql\n        encoding: unicode\n        host: localhost\n        database: testapp_development\n        username: testapp\n        password:\n\n      #ORACLE\n      development:\n        adapter: jdbc\n        driver: oracle.jdbc.OracleDriver\n        url: jdbc:oracle:thin:@myOracleHost:1521:mySID\n        username: myUser\n        password: myPass\n\n      #JavaDB/DerbyDB\n      development:\n        adapter: jdbc\n        driver: org.apache.derby.jdbc.EmbeddedDriver\n        url: jdbc:derby:{database};create=true\n        \n\n'''8.''' If you're using Rails 2.0, you're done. The rest of configuration, including the JDBC driver jar, is done automatically.  If you're running Rails 1.2.x, you'll need to modify <tt>environment.rb</tt>. Add the following snippet inside the <tt>Rails::Initializer</tt> block:\n\n      if RUBY_PLATFORM =~ /java/\n        require 'jdbc/mysql' #per jdbc-mysql-5.0.4/README.txt\n      end\n\n'''9.''' Create a <tt>testapp_development</tt> database, grants for <tt>testapp</tt> user, and a <tt>widgets</tt> table in MySQL (use migrations if you like).\n\n'''10.''' Scaffold Widgets CRUD\n\n      jruby script/generate scaffold widget\n\n'''11.''' Start up the server\n\n      jruby script/server\n\n'''12.''' In your browser, go to [http://localhost:3000/widgets].\n\n\n\nAnd that's about it. You've now got a scaffolded widget page running in JRuby over JDBC to MySQL.\n\n==Troubleshooting==\n* '''ActiveRecord-JDBC does not install:''' I had some trouble myself. I think something's up with either RubyForge or with our released gem. You can always download ActiveRecord-JDBC and install it locally, of course.\n* '''Scaffold fails with an error about \"nonexistent jdbc adapter\":''' Ensure that you've added the <tt>require</tt> line to <tt>environment.rb</tt>.  Hopefully this will be unnecessary in the future.\n* '''Scaffold and script/server terminate without running:''' Make sure you've successfully installed the ActiveRecord-JDBC gem. The additional <tt>require</tt> in <tt>environment.rb</tt> causes Rails scripts to die silently if there are any errors.\n* '''Scaffold fails with the error \"cannot convert NilClass into String\":''' Make sure you've correctly specified the driver and url lines in <tt>database.yml</tt>\n* '''Unable to choose type from ... for decimal:''' PostgreSQL and Oracle don't report a type for decimal. Fixed in ActiveRecord-JDBC trunk.\n* '''rake aborted! ...  undefined method <tt>'last'</tt> for <tt>{}:Hash</tt>:''' If you see this error when trying to run a migration, it probably means you had previously used the 0.7.0 version of the activerecord-jdbcmysql-adapter, and it had created the following rake task file in your rails application: <tt>lib/tasks/jdbc_databases.rake</tt>.\n* '''<tt>net/ssh</tt> doesn't work at this time with jruby 1.0.3 and net/ssh 1.1.2:''' Delete this file and the error should go away. See: [http://jira.codehaus.org/browse/JRUBY-1859/ JRUBY-1859] for more info.\n* '''You see the following error when using SQL Server:'''<br/><tt> &nbsp;&nbsp;&nbsp;com.microsoft.sqlserver.jdbc.AuthenticationJNI<br/> &nbsp;&nbsp;&nbsp;&nbsp;{clinit}<br/> &nbsp;&nbsp;&nbsp;WARNING: Failed to load the sqljdbc_auth.dll</tt><br/>See [[FAQs#troubleshooting_JNI|I am having a weird JNI problem. Help me!]]\n* '''You have foxy_fixtures plugin installed and you get the following error:'''<br/><tt> &nbsp;'load_missing_constant':<br/> &nbsp; uninitialized constant ActiveRecord::ConnectionAdapters::MysqlAdapter (NameError)</tt><br/>This error occurs because foxy_features ships with built-in active_record adapters for MySQL, SQLite and PostgreSQL. Specifying any of the <tt>jdbc:{dbname}</tt>'s, or just <tt>jdbc</tt>, will cause foxy_fixtures to load the MySQL Ruby driver by default. This, obviously, will fail since there is no native MySQL driver for JRuby. To be able to run the app, the easy fix is to take the plugin out&mdash;uninstall it. Development and testing with foxy_fixtures and <tt>activerecord-jdbc</tt> still needs to be researched.\n","created_at":"2009-07-01T01:06:10Z","content_type":"application/vnd.com.kenai.page.revision+json"}