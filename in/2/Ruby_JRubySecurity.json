{"href":"https://kenai.com/api/projects/jruby/features/wiki/pages/Ruby_JRubySecurity/revisions/2.json","name":"Ruby_JRubySecurity","number":2,"page_href":"https://kenai.com/api/projects/jruby/features/wiki/pages/Ruby_JRubySecurity.json","person":"pfussell","description":"Added title and link nav at top. Minor edits.","text":"[[Home|&raquo; JRuby Project Wiki Home Page]] &nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [[Internals|&raquo; Design: Internals]] \n<h1>Ruby/JRuby Security</h1>\nA new implementation to replace Safe/Taint, snce Safe and Taint do not work and provide a false sense of \nsecurity.  There are two options: Using a Sandbox type environment or a permission-based protocol.  The Sandbox has been around since Java 1.0 and was found to be good only at a macro level.  For finer grained control, the <tt>Permission</tt> class and <tt>AccessControl</tt> class were introduced in Java 1.2.  \n\nHaving a <tt>Permission</tt> based security implementation would be ideal.\n\n\n\n'''Requirements'''\n* It must be something that can be implemented in MRI/KRI, possibly using the same API/mechanisms used right now.\n* It must not introduce overhead back into the system like taint/safe does now. \n* Security should be based on addition of rights instead of the removal of them.\n* Fine-grained control should be allowed for distributed programming.  For example, DRb\n\n\n'''Possible Solutions'''\n* Keep the current Implementation of Safe and Taint.\n* A sandbox based on the same principles as the Java Sandbox.<br/>Here is a sandbox base for MRI: [http://code.whytheluckystiff.net/sandbox].\n* Use a <tt>Permission</tt> based architecture such as Java 1.2 and later.","created_at":"2009-08-01T00:56:19Z","content_type":"application/vnd.com.kenai.page.revision+json"}