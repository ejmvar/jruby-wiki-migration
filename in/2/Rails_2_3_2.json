{"href":"https://kenai.com/api/projects/jruby/features/wiki/pages/Rails_2_3_2/revisions/2.json","name":"Rails_2_3_2","number":2,"page_href":"https://kenai.com/api/projects/jruby/features/wiki/pages/Rails_2_3_2.json","person":"pfussell","description":"Added title, links at top, and did some formatting edits","text":"[[Home|&raquo; JRuby Project Wiki Home Page]] &nbsp; &nbsp; [[JRubyOnRails#War_File_Deployment|&raquo; JRuby on Rails: War File Deployment]]\n=Rails 2.3.2 Notice=\n\n==English Notice==\n\nHello all,\n\nSince the Rails 2.3.2 update, some problems can come up with Ruby using Tomcat or Glassfish when deploying a production Rails application. These problems are in the area of session management. \n\nSince Rails 2.3.2, database sessions must be activated with JRuby. In the file <tt>initializers/session_store.rb</tt>, you have to uncomment the line  <tt>ActionController::Base.session_store = :active_record_store</tt>.\n\nThen execute the following Rake commands:\n rake db:sessions:create\n rake db:migrate\n\nThis is necessary to deploy the tables that manage sessions.\nAfter having performed a \u00ab warble config \u00bb, you need to add this line:\n config.webxml.jruby.session_store = 'db'\nThat will tell the Java container that you want to use database sessions. This line will modify only the file <tt>WEB-INF/web.xml</tt>.\n\nFinally , you need to use a little hack. In the file <tt>environment.rb</tt>, just above the line <tt>Rails::Initializer.run do |config|</tt>, add the following code: \n  if defined?(JRUBY_VERSION)\n    # hack to fix jruby-rack's incompatibility with rails edge\n    module ActionController\n      module Session\n        class JavaServletStore\n          def initialize(app, options={}); end\n          def call(env); end\n        end\n      end\n    end\n  end\n\nThat's all !\n\n==Fran\u00e7ais==\n\nBonjour \u00e0 tous,\n\nDepuis la mise \u00e0 jour de rails en 2.3.2, lors du d\u00e9ploiement d\u2019une application rails en production avec JRUBY sur Tomcat ou Glassish, certains probl\u00e8mes se pr\u00e9sentent. Pour faire court, c\u2019est la gestion des sessions qui pose probl\u00e8me.\nJe vous fais profiter de mon retour car j\u2019ai un peu gal\u00e9rer pour trouver de la doc dessus.\n\nDonc, depuis la version 2.3.2 de rails pour une mise en production avec JRUBY, il faut activer les sessions en base de donn\u00e9es.\n\nDans le fichier <tt>initializers/session_store.rb</tt>, il faut d\u00e9commenter la ligne\n ActionController::Base.session_store = :active_record_store\n\nPuis, comme sug\u00e9r\u00e9, ex\u00e9cuter les commandes rake suivantes :\n rake db:sessions:create\n rake db:migrate\nCeci, afin de d\u00e9ployer les tables n\u00e9cessaires \u00e0 la gestion des sessions.\n\nApr\u00e8s avoir fait un \u00ab warble config \u00bb, il est n\u00e9cessaire d\u2019ajouter la ligne :\n config.webxml.jruby.session_store = 'db'\n\nCeci dans le but, d\u2019informer le container java que l\u2019on d\u00e9sire utiliser les sessions en base. Cette ligne aura simplement pour effet de modifier le fichier <tt>WEB-INF/web.xml</tt>.\n\nPuis utiliser un petit hack. Dans le fichier <tt>environment.rb</tt>, au dessus de la ligne <tt>Rails::Initializer.run do |config|</tt>, mettre :\n  if defined?(JRUBY_VERSION)\n    # hack to fix jruby-rack's incompatibility with rails edge\n    module ActionController\n      module Session\n        class JavaServletStore\n          def initialize(app, options={}); end\n          def call(env); end\n        end\n      end\n    end\n  end\n\nVoil\u00e0 !\n","created_at":"2009-07-02T03:16:34Z","content_type":"application/vnd.com.kenai.page.revision+json"}