{"href":"https://kenai.com/api/projects/jruby/features/wiki/pages/RedBridgeExamples/revisions/2.json","name":"RedBridgeExamples","number":2,"page_href":"https://kenai.com/api/projects/jruby/features/wiki/pages/RedBridgeExamples.json","person":"yokolet","description":"","text":"[[Home|&raquo; JRuby Project Wiki Home Page]]<br/>\n[[RedBridge|&raquo; Embedding JRuby Wiki Home Page]]\n<h1>Embedding JRuby - Code Examples</h1>\n\n__TOC__\n= Red Bridge =\n\n== Features of Red Bridge ==\nSee [[RedBridge#Features_of_Red_Bridge|Features of Red Bridge]] section.\n\n== Download ==\nSee [[RedBridge#Download|Download]] section.\n\n== Getting Started ==\nSee [[RedBridge#Getting_Started|Getting Started]] section.\n\n== Configurations ==\nSee [[RedBridge#Configurations|Configurations]] section.\n\n== Code Examples ==\n\n=== Simple Evaluation with sharing variables ===\n\n* Core\n<pre name=\"java\">\npackage vanilla;\n\nimport org.jruby.embed.ScriptingContainer;\n\npublic class SimpleEvalSample {\n\n    private SimpleEvalSample() {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        ScriptingContainer container = new ScriptingContainer();\n        container.put(\"message\", \"local variable\");\n        container.put(\"@message\", \"instance variable\");\n        container.put(\"$message\", \"global variable\");\n        container.put(\"MESSAGE\", \"constant\");\n        String script =\n                \"puts message\\n\" +\n                \"puts @message\\n\" +\n                \"puts $message\\n\" +\n                \"puts MESSAGE\";\n        container.runScriptlet(script);\n    }\n\n    public static void main(String[] args) {\n        new SimpleEvalSample();\n    }\n}</pre>\nOutputs:\n<pre>\n[vanilla.SimpleEvalSample]\nlocal variable\ninstance variable\nglobal variable\nconstant</pre>\n\n*JSR223\n<pre name=\"java\">\npackage redbridge;\n\nimport javax.script.Bindings;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptEngineManager;\nimport javax.script.ScriptException;\nimport javax.script.SimpleBindings;\n\npublic class Jsr223SimpleEvalSample {\n\n    private Jsr223SimpleEvalSample() throws ScriptException {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        defaultBehavior();\n        transientBehavior();\n    }\n\n    private void defaultBehavior() throws ScriptException {\n        ScriptEngineManager manager = new ScriptEngineManager();\n        ScriptEngine engine = manager.getEngineByName(\"jruby\");\n        Bindings bindings = new SimpleBindings();\n        bindings.put(\"message\", \"global variable\");\n        String script =\n                \"puts $message\";\n        engine.eval(script, bindings);\n    }\n\n     private void transientBehavior() throws ScriptException {\n        System.setProperty(\"org.jruby.embed.localvariable.behavior\", \"transient\");\n        ScriptEngineManager manager = new ScriptEngineManager();\n        ScriptEngine engine = manager.getEngineByName(\"jruby\");\n        Bindings bindings = new SimpleBindings();\n        bindings.put(\"message\", \"local variable\");\n        bindings.put(\"@message\", \"instance variable\");\n        bindings.put(\"$message\", \"global variable\");\n        bindings.put(\"MESSAGE\", \"constant\");\n        String script =\n                \"puts message\\n\" +\n                \"puts @message\\n\" +\n                \"puts $message\\n\" +\n                \"puts MESSAGE\";\n        engine.eval(script, bindings);\n    }\n\n    public static void main(String[] args) throws ScriptException {\n        new Jsr223SimpleEvalSample();\n    }\n}</pre>\nOutputs:\n<pre>\n[redbridge.Jsr223SimpleEvalSample]\nglobal variable\nlocal variable\ninstance variable\nglobal variable\nconstant</pre>\n\n*BSF\n<pre name=\"java\">\npackage azuki;\n\nimport org.apache.bsf.BSFException;\nimport org.apache.bsf.BSFManager;\n\npublic class BsfSimpleEvalSample {\n    private BsfSimpleEvalSample() throws BSFException {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        BSFManager.registerScriptingEngine(\"jruby\", \"org.jruby.embed.bsf.JRubyEngine\", new String[] {\"rb\"});\n        BSFManager manager = new BSFManager();\n        manager.declareBean(\"message\", \"global variable\", String.class);\n        String script =\n                \"puts $message\";\n        manager.exec(\"jruby\", \"<script>\", 0, 0, script);\n    }\n\n    public static void main(String[] args) throws BSFException {\n        new BsfSimpleEvalSample();\n    }\n}</pre>\nOutputs:\n<pre>\n[azuki.BsfSimpleEvalSample]\nglobal variable\n</pre>\n\n=== Persistent Local Variables ===\n\n* Core\n<pre name=\"java\">\npackage vanilla;\n\nimport java.util.Map;\nimport java.util.Set;\nimport org.jruby.embed.ScriptingContainer;\nimport org.jruby.embed.LocalVariableBehavior;\n\npublic class PersistentLocalVariableSample {\n\n    private PersistentLocalVariableSample() {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        ScriptingContainer container = new ScriptingContainer(LocalVariableBehavior.PERSISTENT);\n        Object ret = container.runScriptlet(\"x=144\");\n        Object ret2 = container.runScriptlet(\"Math.sqrt x\");\n        System.out.println(\"Square root of \" + ret + \" is \" + ret2);\n\n        String message = \"hot Vanilla Latte at that cafe.\";\n        container.put(\"message\", message);\n        ret = container.runScriptlet(\"ret=\\\"You can enjoy #{message}\\\"\");\n        System.out.println(ret);\n\n        String correction = \"could have enjoyed\";\n        container.put(\"correction\", correction);\n        ret = container.runScriptlet(\"ret = ret.gsub(/can enjoy/, correction)\");\n        System.out.println(ret);\n        \n        Map m = container.getVarMap();\n        Set<String> keys = container.getVarMap().keySet();\n        for (String key : keys) {\n            System.out.println(key + \", \" + m.get(key));\n        }\n    }\n\n    public static void main(String[] args) {\n        new PersistentLocalVariableSample();\n    }\n}</pre>\nOutputs:\n<pre>\n[vanilla.PersistentLocalVariableSample]\nSquare root of 144 is 12.0\nYou can enjoy hot Vanilla Latte at that cafe.\nYou could have enjoyed hot Vanilla Latte at that cafe.\nret, You could have enjoyed hot Vanilla Latte at that cafe.\nMANT_DIG, 53\nMAX_10_EXP, 308\nDIG, 15\nMIN_EXP, -1021\nROUNDS, 1\ncorrection, could have enjoyed\nmessage, hot Vanilla Latte at that cafe.\nMAX, 1.7976931348623157E308\nRADIX, 2\nEPSILON, 2.220446049250313E-16\nMIN, 4.9E-324\nMIN_10_EXP, -307\nx, 144\nMAX_EXP, 1024\n</pre>\n\n* JSR223\n<pre name=\"java\">\npackage redbridge;\n\nimport java.util.Set;\nimport javax.script.Bindings;\nimport javax.script.ScriptContext;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptEngineManager;\nimport javax.script.ScriptException;\n\npublic class Jsr223PersistentLocalVariableSample {\n\n    private Jsr223PersistentLocalVariableSample() throws ScriptException {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        System.setProperty(\"org.jruby.embed.localvariable.behavior\", \"persistent\");\n        ScriptEngineManager manager = new ScriptEngineManager();\n        ScriptEngine engine = manager.getEngineByName(\"jruby\");\n        Object ret = engine.eval(\"x=144\");\n        Object ret2 = engine.eval(\"Math.sqrt x\");\n        System.out.println(\"Square root of \" + ret + \" is \" + ret2);\n\n        Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n        String message = \"a red big bridge in San Francisco.\";\n        bindings.put(\"message\", message);\n        ret = engine.eval(\"ret=\\\"You can see #{message}\\\"\", bindings);\n        System.out.println(ret);\n\n        bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n        String correction = \"elsewhere in the world\";\n        bindings.put(\"correction\", correction);\n        ret = engine.eval(\"ret = ret.gsub(/in San Francisco/, correction)\", bindings);\n        System.out.println(ret);\n\n        Set<String> keys = bindings.keySet();\n        for (String key : keys) {\n            System.out.println(key + \", \" + bindings.get(key));\n        }\n    }\n\n    public static void main(String[] args) throws ScriptException {\n        new Jsr223PersistentLocalVariableSample();\n    }\n}</pre>\nOutputs:\n<pre>\n[redbridge.Jsr223PersistentLocalVariableSample]\nSquare root of 144 is 12.0\nYou can see a red big bridge in San Francisco.\nYou can see a red big bridge elsewhere in the world.\nret, You can see a red big bridge elsewhere in the world.\nMAX_10_EXP, 308\nMANT_DIG, 53\nDIG, 15\nMIN_EXP, -1021\nROUNDS, 1\ncorrection, elsewhere in the world\nmessage, a red big bridge in San Francisco.\nMAX, 1.7976931348623157E308\nRADIX, 2\nEPSILON, 2.220446049250313E-16\nMIN, 4.9E-324\nMIN_10_EXP, -307\nx, 144\nMAX_EXP, 1024</pre>\n\n* BSF\n<pre name=\"java\">\npackage azuki;\n\nimport java.util.Vector;\nimport org.apache.bsf.BSFException;\nimport org.apache.bsf.BSFManager;\n\npublic class BsfPersistentLocalVariableSample {\n    private BsfPersistentLocalVariableSample() throws BSFException {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        BSFManager.registerScriptingEngine(\"jruby\", \"org.jruby.embed.bsf.JRubyEngine\", new String[] {\"rb\"});\n        BSFManager manager = new BSFManager();\n\n        Object ret = manager.apply(\"jruby\", \"<script>\", 0, 0, \"x=144\", null, null);\n        Object ret2 = manager.apply(\"jruby\", \"<script>\", 0, 0, \"Math.sqrt x\", null, null);\n        System.out.println(\"Square root of \" + ret + \" is \" + ret2);\n\n        Vector paramNames = new Vector();\n        Vector args = new Vector();\n        paramNames.add(\"message\");\n        args.add(\"red small beans and often used in a form of paste.\");\n        ret = manager.apply(\"jruby\", \"<script>\", 0, 0, \"ret=\\\"Azuki beans are #{message}\\\"\", paramNames, args);\n        System.out.println(ret);\n        paramNames.clear();\n        args.clear();\n        \n        paramNames.add(\"correction\");\n        args.add(\"usually\");\n        ret = manager.apply(\"jruby\", \"<script>\", 0, 0, \"ret = ret.gsub(/often/, correction)\", paramNames, args);\n        System.out.println(ret);\n    }\n\n    public static void main(String[] args) throws BSFException {\n        new BsfPersistentLocalVariableSample();\n    }\n}</pre>\nOutputs:\n<pre>\n[azuki.BsfPersistentLocalVariableSample]\nSquare root of 144 is 12.0\nAzuki beans are red small beans and often used in a form of paste.\nAzuki beans are red small beans and usually used in a form of paste.</pre>\n\n=== Method Call ===\n\n* Core\n<pre name=\"java\">\npackage vanilla;\n\nimport org.jruby.embed.ScriptingContainer;\n\npublic class MethodCallSample {\n\n    private MethodCallSample() {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        ScriptingContainer container = new ScriptingContainer();\n        String script =\n                \"# Radioactive decay\\n\" +\n                \"def amount_after_years(q0, t)\\n\" +\n                  \"q0 * Math.exp(1.0 / $half_life * Math.log(1.0/2.0) * t)\\n\" +\n                \"end\\n\" +\n                \"def years_to_amount(q0, q)\\n\" +\n                  \"$half_life * (Math.log(q) - Math.log(q0)) / Math.log(1.0/2.0)\\n\" +\n                \"end\";\n        Object receiver = container.runScriptlet(script);\n\n        container.put(\"$half_life\", 24100); // Plutonium\n        String method = \"amount_after_years\"; // calculates the amount left after given years\n        Object[] args = new Object[2];\n        args[0] = 10.0;    // initial amount is 10.0g\n        args[1] = 1000;    // suppose 1000 years have passed\n        Object result = container.callMethod(receiver, method, args, Double.class);\n        System.out.println(args[0] + \"g Plutonium to decay to \" + result + \"g in \" + args[1] + \" years\");\n\n        method = \"years_to_amount\"; // calculates the years to decay to a given amount\n        args[0] = 10.0;    // initial amount is 10.0g\n        args[1] = 1.0;     // suppose 1.0g is still there\n        result = container.callMethod(receiver, method, args, Double.class);\n        System.out.println(args[0] + \"g Plutonium to decay to \" + args[1] + \"g in \" + result + \" years\");\n    }\n\n    public static void main(String[] args) {\n        new MethodCallSample();\n    }\n}</pre>\nOutputs:\n<pre>\n[vanilla.MethodCallSample]\n10.0g Plutonium to decay to 9.716483752784367g in 1000 years\n10.0g Plutonium to decay to 1.0g in 80058.46708678544 years\n</pre>\n\n* JSR223\n<pre name=\"java\">\npackage redbridge;\n\nimport javax.script.Invocable;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptEngineManager;\nimport javax.script.ScriptException;\n\npublic class Jsr223MethodCallSample {\n\n    private Jsr223MethodCallSample() throws ScriptException, NoSuchMethodException {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        ScriptEngineManager manager = new ScriptEngineManager();\n        ScriptEngine engine = manager.getEngineByName(\"jruby\");\n        String script =\n                \"# Radioactive decay\\n\" +\n                \"def amount_after_years(q0, t)\\n\" +\n                  \"q0 * Math.exp(1.0 / $half_life * Math.log(1.0/2.0) * t)\\n\" +\n                \"end\\n\" +\n                \"def years_to_amount(q0, q)\\n\" +\n                  \"$half_life * (Math.log(q) - Math.log(q0)) / Math.log(1.0/2.0)\\n\" +\n                \"end\";\n        Object receiver = engine.eval(script);\n        \n        engine.put(\"half_life\", 5715); // Carbon\n        String method = \"amount_after_years\"; // calculates the amount left after given years\n        Object[] args = new Object[2];\n        args[0] = 10.0;    // initial amount is 10.0g\n        args[1] = 1000;    // suppose 1000 years have passed\n        Object result = ((Invocable)engine).invokeFunction(method, args);\n        System.out.println(args[0] + \"g Carbon to decay to \" + result + \"g in \" + args[1] + \" years\");\n\n        method = \"years_to_amount\"; // calculates the years to decay to a given amount\n        args[0] = 10.0;    // initial amount is 10.0g\n        args[1] = 1.0;     // suppose 1.0g is still there\n        result = ((Invocable)engine).invokeFunction(method, args);\n        System.out.println(args[0] + \"g Carbon to decay to \" + args[1] + \"g in \" + result + \" years\");\n\n    }\n\n    public static void main(String[] args) throws ScriptException, NoSuchMethodException {\n        new Jsr223MethodCallSample();\n    }\n}</pre>\nOutputs:\n<pre>\n[redbridge.Jsr223MethodCallSample]\n10.0g Carbon to decay to 8.857809480593293g in 1000 years\n10.0g Carbon to decay to 1.0g in 18984.81906228128 years\n</pre>\n\n* BSF\n<pre name=\"java\">\npackage azuki;\n\nimport org.apache.bsf.BSFException;\nimport org.apache.bsf.BSFManager;\nimport org.jruby.embed.bsf.JRubyEngine;\n\npublic class BsfMethodCallSample {\n    private BsfMethodCallSample() throws BSFException {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        BSFManager.registerScriptingEngine(\"jruby\", \"org.jruby.embed.bsf.JRubyEngine\", new String[] {\"rb\"});\n        BSFManager manager = new BSFManager();\n        JRubyEngine engine = (JRubyEngine) manager.loadScriptingEngine(\"jruby\");\n        String script =\n                \"# Radioactive decay\\n\" +\n                \"def amount_after_years(q0, t)\\n\" +\n                  \"q0 * Math.exp(1.0 / $half_life * Math.log(1.0/2.0) * t)\\n\" +\n                \"end\\n\" +\n                \"def years_to_amount(q0, q)\\n\" +\n                  \"$half_life * (Math.log(q) - Math.log(q0)) / Math.log(1.0/2.0)\\n\" +\n                \"end\";\n        Object receiver = manager.eval(\"jruby\", \"radioactive_decay\", 0, 0, script);\n\n        String method = \"amount_after_years\"; // calculates the amount left after given years\n        Object[] args = new Object[2];\n        args[0] = 10.0;    // initial amount is 10.0g\n        args[1] = 1000;    // suppose 1000 years have passed\n\n        // Radium\n        manager.declareBean(\"half_life\", 1599, Long.class); // the half-life of Radium is 1599\n        Object result = engine.call(receiver, method, args);\n        System.out.println(args[0] + \"g Radium to decay to \" + result + \"g in \" + args[1] + \" years\");\n        \n        method = \"years_to_amount\"; // calculates the years to decay to a given amount\n        args[0] = 10.0;    // initial amount is 10.0g\n        args[1] = 1.0;     // suppose 1.0g is still there\n        result = engine.call(receiver, method, args);\n        System.out.println(args[0] + \"g Radium to decay to \" + args[1] + \"g in \" + result + \" years\");\n    }\n\n    public static void main(String[] args) throws BSFException {\n        new BsfMethodCallSample();\n    }\n\n}</pre>\nOutputs:\n<pre>\n[azuki.BsfMethodCallSample]\n10.0g Radium to decay to 6.482441247843886g in 1000 years\n10.0g Radium to decay to 1.0g in 5311.763023724893 years\n</pre>\n\n=== Class Method Call ===\n* tree_with_ivars.rb\n<pre name=\"ruby\">\nclass Tree\n  attr_reader :name, :shape, :foliage, :flower\n  def initialize(flower)\n    @flower = flower\n  end\n  def to_s\n    \"#{name.capitalize} is a #{shape} shaped, #{foliage} tree, and blooms #{flower.color} flowers in #{flower.bloomtime}.\"\n  end\n  def update\n    flower.color = @color\n    flower.bloomtime = @bloomtime\n  end\nend\n\nclass Flower\n  attr_accessor :color, :bloomtime\n  def initialize\n  end\nend\n\nTree.new(Flower.new)</pre>\n\n* Core\n<pre name=\"java\">\npackage vanilla;\n\nimport org.jruby.embed.PathType;\nimport org.jruby.embed.ScriptingContainer;\n\npublic class ClassMethodCallSample {\n    private final static String filename = \"ruby/tree_with_ivars.rb\";\n\n    private ClassMethodCallSample() {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        ScriptingContainer container = new ScriptingContainer();\n        \n        Object receiver = container.runScriptlet(PathType.CLASSPATH, filename);\n        container.put(\"@name\", \"cherry blossom\");\n        container.put(\"@shape\", \"oval\");\n        container.put(\"@foliage\", \"deciduous\");\n        container.put(\"@color\", \"pink\");\n        container.put(\"@bloomtime\", \"March - April\");\n        container.callMethod(receiver, \"update\", Object.class);\n        System.out.println(container.callMethod(receiver, \"to_s\", String.class));\n\n        container.put(\"@name\", \"cedar\");\n        container.put(\"@shape\", \"pyramidal\");\n        container.put(\"@foliage\", \"evergreen\");\n        container.put(\"@color\", \"nondescript\");\n        container.put(\"@bloomtime\", \"April - May\");\n        container.callMethod(receiver, \"update\", Object.class);\n        System.out.println(container.callMethod(receiver, \"to_s\", String.class));\n    }\n\n    public static void main(String[] args) {\n        new ClassMethodCallSample();\n    }\n}</pre>\nOutputs:\n<pre>\n[vanilla.ClassMethodCallSample]\nCherry blossom is a oval shaped, deciduous tree, and blooms pink flowers in March - April.\nCedar is a pyramidal shaped, evergreen tree, and blooms nondescript flowers in April - May.</pre>\n\n* JSR223\n<pre name=\"java\">\npackage redbridge;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.io.Reader;\nimport javax.script.Invocable;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptEngineManager;\nimport javax.script.ScriptException;\n\npublic class Jsr223ClassMethodCallSample {\n    private final static String filename = \"ruby/tree_with_ivars.rb\";\n\n    private Jsr223ClassMethodCallSample() throws ScriptException, NoSuchMethodException, FileNotFoundException {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        System.setProperty(\"org.jruby.embed.localvariable.behavior\", \"transient\");\n        ScriptEngineManager manager = new ScriptEngineManager();\n        ScriptEngine engine = manager.getEngineByName(\"jruby\");\n\n        String basedir = System.getProperty(\"user.dir\") + \"/src\";\n        Reader reader = new FileReader(basedir + \"/\" + filename);\n        Object receiver = engine.eval(reader);\n        engine.put(\"@name\", \"cherry blossom\");\n        engine.put(\"@shape\", \"oval\");\n        engine.put(\"@foliage\", \"deciduous\");\n        engine.put(\"@color\", \"pink\");\n        engine.put(\"@bloomtime\", \"March - April\");\n        ((Invocable)engine).invokeMethod(receiver, \"update\");\n        System.out.println(((Invocable)engine).invokeMethod(receiver, \"to_s\"));\n\n        engine.put(\"@name\", \"cedar\");\n        engine.put(\"@shape\", \"pyramidal\");\n        engine.put(\"@foliage\", \"evergreen\");\n        engine.put(\"@color\", \"nondescript\");\n        engine.put(\"@bloomtime\", \"April - May\");\n        ((Invocable)engine).invokeMethod(receiver, \"update\");\n        System.out.println(((Invocable)engine).invokeMethod(receiver, \"to_s\"));\n    }\n\n    public static void main(String[] args) throws ScriptException, NoSuchMethodException, FileNotFoundException {\n        new Jsr223ClassMethodCallSample();\n    }\n}</pre>\nOutputs:\n<pre>\n[redbridge.Jsr223ClassMethodCallSample]\nCherry blossom is a oval shaped, deciduous tree, and blooms pink flowers in March - April.\nCedar is a pyramidal shaped, evergreen tree, and blooms nondescript flowers in April - May.</pre>\n\n=== Interface Implementation ===\n\n* Core\n** Interface: vanilla.Calulable\n<pre name=\"java\">\npackage vanilla;\n\nimport java.util.List;\n\npublic interface Calculable {\n    List<Long> dimension(long base);\n    Double hypotenuse(double adjacent, double opposite);\n}\n</pre>\n** Implementation: calculation.rb\n<pre name=\"ruby\">\nclass Calculation\n  include Java::vanilla.Calculable\n  def dimension(base)\n    x = base + 1\n    y = base + 2\n    z = base - 1\n    return x, y, z\n  end\n  def hypotenuse(adjacent, opposite)\n    Math.hypot(adjacent, opposite)\n  end\nend\nCalculation.new\n</pre>\n** Interface: vanilla.FluidForce\n<pre name=\"java\">\npackage vanilla;\n\npublic interface FluidForce {\n    Double getFluidForce(double a, double b, double depth);\n}\n</pre>\n** Implementation: fluid_force.rb\n<pre name=\"ruby\">\ndef get_fluid_force(x, y, depth)\n  area = Math::PI * x * y # ellipse\n  return @w * area * depth\nend\n</pre>\n** Java program\n<pre name=\"java\">\npackage vanilla;\n\nimport java.util.List;\nimport org.jruby.embed.PathType;\nimport org.jruby.embed.ScriptingContainer;\n\npublic class InterfaceImplSample {\n    private final String filename1 = \"ruby/calculation.rb\";\n    private final String filename2 = \"ruby/fluid_force.rb\";\n\n    private InterfaceImplSample() {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        ScriptingContainer container = new ScriptingContainer();\n\n        // implemented by a Ruby class\n        Object receiver = container.runScriptlet(PathType.CLASSPATH, filename1);\n        Calculable c = container.getInstance(receiver, Calculable.class);\n        List<Long> xyz = c.dimension(10L);\n        System.out.format(\"Dimensions are %d x %d x %d.\\n\", xyz.get(0), xyz.get(1), xyz.get(2));\n        double adjacent = 3.0;\n        double opposite = 4.0;\n        Double hypotenuse = c.hypotenuse(adjacent, opposite);\n        System.out.format(\"Adjacent, opposite, and hypotenuse are %.2f, %.2f, %.2f.\\n\",\n                adjacent, opposite, hypotenuse);\n\n        // implemented by a top level method\n        container.getVarMap().clear();\n        container.put(\"@w\", 62.4); // weight-densities of water in pounds per cubic foot\n        receiver = container.runScriptlet(PathType.CLASSPATH, filename2);\n        FluidForce f = container.getInstance(receiver, FluidForce.class);\n        double a = 2.0;\n        double b = 3.0;\n        double depth = 6.0;\n        Double force = f.getFluidForce(a, b, depth);\n        System.out.format(\"Water force to %.2f ft x %.2f ft ellipse in depth of %.2f ft is %.5f lb.\\n\",\n                a, b, depth, force);\n\n    }\n\n    public static void main(String[] args) {\n        new InterfaceImplSample();\n    }\n}</pre>\nOutputs:\n<pre>\n[vanilla.InterfaceImplSample]\nDimensions are 11 x 12 x 9.\nAdjacent, opposite, and hypotenuse are 3.00, 4.00, 5.00.\nWater force to 2.00 ft x 3.00 ft ellipse in depth of 6.00 ft is 7057.27374 lb.\n</pre>\n\n* JSR223\n** Java program\n<pre name=\"java\">\npackage redbridge;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport java.util.List;\nimport javax.script.Bindings;\nimport javax.script.Invocable;\nimport javax.script.ScriptContext;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptEngineManager;\nimport javax.script.ScriptException;\nimport vanilla.Calculable;\nimport vanilla.FluidForce;\n\npublic class Jsr223GetInterfaceSample {\n\n    private Jsr223GetInterfaceSample() throws ScriptException, FileNotFoundException {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        System.setProperty(\"org.jruby.embed.localvariable.behavior\", \"transient\");\n        ScriptEngineManager manager = new ScriptEngineManager();\n        ScriptEngine engine = manager.getEngineByName(\"jruby\");\n\n        // implemented by a Ruby class\n        String filename = System.getProperty(\"user.dir\") + \"/src/ruby/calculation.rb\";\n        FileReader reader = new FileReader(filename);\n        Object receiver = engine.eval(reader);\n        Calculable c = (Calculable)((Invocable)engine).getInterface(receiver, Calculable.class);\n        List<Long> xyz = c.dimension(20L);\n        System.out.format(\"Dimensions are %d x %d x %d.\\n\", xyz.get(0), xyz.get(1), xyz.get(2));\n        double adjacent = 5.0;\n        double opposite = 12.0;\n        Double hypotenuse = c.hypotenuse(adjacent, opposite);\n        System.out.format(\"Adjacent, opposite, and hypotenuse are %.2f, %.2f, %.2f.\\n\",\n                adjacent, opposite, hypotenuse);\n\n        // implemented by a top level function\n        filename = System.getProperty(\"user.dir\") + \"/src/ruby/fluid_force.rb\";\n        reader = new FileReader(filename);\n        Bindings bindings = engine.getBindings(ScriptContext.ENGINE_SCOPE);\n        bindings.put(\"@w\", 49.4); // weight-densities of ethyl alcohol in pounds per cubic foot\n        engine.eval(reader, bindings);\n        FluidForce f = (FluidForce)((Invocable)engine).getInterface(FluidForce.class);\n        double a = 2.0;\n        double b = 3.0;\n        double depth = 6.0;\n        Double force = f.getFluidForce(a, b, depth);\n        System.out.format(\"Ethyl alcohol force to %.2f ft x %.2f ft ellipse in depth of %.2f ft is %.5f lb.\\n\",\n                a, b, depth, force);\n    }\n\n    public static void main(String[] args) throws ScriptException, FileNotFoundException {\n        new Jsr223GetInterfaceSample();\n    }\n}</pre>\nOutputs:\n<pre>\n[redbridge.Jsr223GetInterfaceSample]\nDimensions are 21 x 22 x 19.\nAdjacent, opposite, and hypotenuse are 5.00, 12.00, 13.00.\nEthyl alcohol force to 2.00 ft x 3.00 ft ellipse in depth of 6.00 ft is 5587.00838 lb.\n</pre>\n\n=== Interface Implementation with Exception and Sharing Variables ===\n\n* Core\n** Interface: vanilla.QuadraticFormula\n<pre name=\"java\">\npackage vanilla;\n\nimport java.util.List;\n\npublic interface QuadraticFormula {\n    List<Double> solve() throws RuntimeException;\n}\n</pre>\n** Implementation: quadratic_formula.rb\n<pre name=\"ruby\">\n# if ax^2+bx+c=0 and b^2-4ac >=0 then\n# x = (-b +/- sqrt(b^2-4ac))/2a\n\nclass QuadraticFormula\n  include Java::vanilla.QuadraticFormula\n  def solve()\n    if $a == 0: raise RangeError end\n    v = $b ** 2 - 4 * $a * $c\n    if v < 0: raise RangeError end\n    s0 = ((-1)*$b - Math.sqrt(v))/(2*$a)\n    s1 = ((-1)*$b + Math.sqrt(v))/(2*$a)\n    return s0, s1\n  end\nend\nQuadraticFormula.new\n</pre>\n** Java program\n<pre name=\"java\">\npackage vanilla;\n\nimport java.util.List;\nimport org.jruby.embed.EmbedEvalUnit;\nimport org.jruby.embed.PathType;\nimport org.jruby.embed.ScriptingContainer;\nimport org.jruby.exceptions.RaiseException;\n\npublic class InterfaceImplSample2 {\n\n    private final String filename = \"ruby/quadratic_formula.rb\";\n\n    private InterfaceImplSample2() {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        ScriptingContainer container = new ScriptingContainer();\n        EmbedEvalUnit unit = container.parse(PathType.CLASSPATH, filename);\n        evaluate(container, unit, \"x^2 + x - 6 = 0\", 1.0, 1.0, -6.0);\n        evaluate(container, unit, \"3x^2 + 4x - 5 = 0\", 3.0, 4.0, -5.0);\n        evaluate(container, unit, \"3x^2 + 4x + 5 = 0\", 3.0, 4.0, 5.0);\n        evaluate(container, unit, \"2x^2 - 3x + 1 = 0\", 2.0, -3.0, 1.0);\n    }\n\n    private void evaluate(ScriptingContainer container, EmbedEvalUnit unit,\n            String expression, double a, double b, double c) {\n        try {\n            System.out.print(\"Solutions of \" + expression + \" are \");\n            container.put(\"$a\", a);\n            container.put(\"$b\", b);\n            container.put(\"$c\", c);\n            Object receiver = unit.run();\n            QuadraticFormula q = container.getInstance(receiver, QuadraticFormula.class);\n            List<Double> solutions = q.solve();\n            System.out.format(\"%.4f, and %.4f.\\n\", solutions.get(0), solutions.get(1));\n        } catch (RuntimeException e) {\n            if (e instanceof RaiseException) {\n                if (\"RangeError\".equals(((RaiseException) e).getMessage())) {\n                    System.out.println(\"complex.\");\n                }\n            }\n            e.printStackTrace();\n        }\n    }\n\n    public static void main(String[] args) {\n        new InterfaceImplSample2();\n    }\n}</pre>\nOutputs:\n<pre>\n[vanilla.InterfaceImplSample2]\nSolutions of x^2 + x - 6 = 0 are -3.0000, and 2.0000.\nSolutions of 3x^2 + 4x - 5 = 0 are -2.1196, and 0.7863.\nSolutions of 3x^2 + 4x + 5 = 0 are complex.\nruby/quadratic_formula.rb:11:in `solve':  (RangeError)\n        from :1\n        ...internal jruby stack elided...\n        from QuadraticFormula.solve(:1)\n        from (unknown).(unknown)(:1)\nSolutions of 2x^2 - 3x + 1 = 0 are 0.5000, and 1.0000.\n</pre>\n\n=== Parse Once, Eval Many Times ===\n\n* Core\n** count_down.rb\n<pre name=\"ruby\">\nrequire 'date'\n\ndef count_down_birthday\n  now = DateTime.now\n  year = now.year\n  days = DateTime.new(year, @month, @day).yday - now.yday\n  if days < 0\n    this_year = DateTime.new(year, 12, 31).yday - now.yday\n    next_year = DateTime.new(year + 1, @month, @day).yday\n    days = this_year + next_year\n  end\n  return \"Happy Birthday!\" if days == 0\n  return \"You have #{days} day(s) to your next birthday!\"\nend\ncount_down_birthday\n</pre>\n\n** Java program\n<pre name=\"java\">\npackage vanilla;\n\nimport org.jruby.embed.EmbedEvalUnit;\nimport org.jruby.embed.PathType;\nimport org.jruby.embed.ScriptingContainer;\n\npublic class ParseOnceEvalManyTimesSample {\n    private static final String filename = \"ruby/count_down.rb\";\n\n    private ParseOnceEvalManyTimesSample() {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        ScriptingContainer container = new ScriptingContainer();\n        EmbedEvalUnit unit = container.parse(PathType.CLASSPATH, filename);\n        evaluate(container, unit, 10, 11);\n        evaluate(container, unit, 1, 1);\n        evaluate(container, unit, 12, 31);\n        evaluate(container, unit, 7, 4);\n    }\n\n    private void evaluate(ScriptingContainer container, EmbedEvalUnit unit, int month, int day) {\n        container.put(\"@month\", month);\n        container.put(\"@day\", day);\n        Object ret = unit.run();\n        System.out.println(ret);\n        container.getVarMap().clear();\n    }\n\n    public static void main(String[] args) {\n        new ParseOnceEvalManyTimesSample();\n    }\n}</pre>\n\nOutputs:\n<pre>\n[vanilla.ParseOnceEvalManyTimesSample]\nHappy Birthday!\nYou have 82 day(s) to your next birthday!\nYou have 81 day(s) to your next birthday!\nYou have 266 day(s) to your next birthday!\n</pre>\n\n* JSR223\n** Java program\n<pre name=\"java\">\npackage redbridge;\n\nimport java.io.FileNotFoundException;\nimport java.io.FileReader;\nimport javax.script.Compilable;\nimport javax.script.CompiledScript;\nimport javax.script.ScriptContext;\nimport javax.script.ScriptEngine;\nimport javax.script.ScriptEngineManager;\nimport javax.script.ScriptException;\n\npublic class Jsr223CompiledScriptSample {\n    private static final String filename = \"src/ruby/count_down.rb\";\n\n    private Jsr223CompiledScriptSample() throws ScriptException, FileNotFoundException {\n        System.out.println(\"[\" + getClass().getName() + \"]\");\n        System.setProperty(\"org.jruby.embed.localvariable.behavior\", \"transient\");\n        ScriptEngineManager manager = new ScriptEngineManager();\n        ScriptEngine engine = manager.getEngineByName(\"jruby\");\n        String scriptFile = System.getProperty(\"user.dir\") + \"/\" + filename;\n        FileReader reader = new FileReader(scriptFile);\n        CompiledScript cs = ((Compilable)engine).compile(reader);\n        evaluate(engine, cs, 10, 11);\n        evaluate(engine, cs, 1, 1);\n        evaluate(engine, cs, 12, 31);\n        evaluate(engine, cs, 7, 4);\n    }\n\n    private void evaluate(ScriptEngine engine, CompiledScript cs, int month, int day)\n            throws ScriptException {\n        engine.put(\"@month\", month);\n        engine.put(\"@day\", day);\n        Object ret = cs.eval();\n        System.out.println(ret);\n        engine.getBindings(ScriptContext.ENGINE_SCOPE).clear();\n    }\n\n    public static void main(String[] args) throws ScriptException, FileNotFoundException {\n        new Jsr223CompiledScriptSample();\n    }\n}\n</pre>\nOutputs:\n<pre>\n[redbridge.Jsr223CompiledScriptSample]\nHappy Birthday!\nYou have 82 day(s) to your next birthday!\nYou have 81 day(s) to your next birthday!\nYou have 266 day(s) to your next birthday!\n</pre>\n\n=== Unicode Escape Support ===\n\n<pre name=\"java\">\nScriptingContainer container = new ScriptingContainer();\nWriter writer = new StringWriter();\ncontainer.setWriter(writer);\nString str = \"\\u3053\\u3093\\u306b\\u3061\\u306f\\u4e16\\u754c\";\ncontainer.runScriptlet(\"puts \\\"\" + str + \"\\\"\");\nSystem.out.println(writer.toString());\n</pre>\n\nOutput\n<pre>\n\u3053\u3093\u306b\u3061\u306f\u4e16\u754c\n</pre>\n\n\n== Servlet Examples ==\nSee [[ServletExamples]] page.","created_at":"2009-11-01T22:13:38Z","content_type":"application/vnd.com.kenai.page.revision+json"}