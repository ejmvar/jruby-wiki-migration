{"href":"https://kenai.com/api/projects/jruby/features/wiki/pages/CompilerPackagingAndPathing/revisions/1.json","name":"CompilerPackagingAndPathing","number":1,"page_href":"https://kenai.com/api/projects/jruby/features/wiki/pages/CompilerPackagingAndPathing.json","person":"john_brock","description":"","text":"Packaging and pathing specification for JRuby compiler.\r\n\r\nGiven:\r\n\r\n* a baz.rb file exists in some directory foo/bar, which exists under user's home directory\r\n\r\nRequirements\r\n\r\n* Compilation of baz.rb should produce baz.class in the same location\r\n* Java's requirement for unique class names means baz.class must have a unique class name\r\n* baz.class may be executed from locations other than from which compiled\r\n\r\nSo assume baz.class contains a class named foo.bar.baz, existing under &lt;home&gt;/foo/bar.\r\n\r\nLoad path contains &lt;home&gt;\r\n\r\nExecuting \"require 'foo/bar/baz'\" should pick up the class file and load it.\r\n\r\nExecuting \"jruby foo/bar/baz.class\" should execute it correctly\r\n\r\nExecuting \"jruby -e \"require 'baz'\" from within &lt;home&gt;/foo/bar should pick it up correctly.\r\n\r\nLoad path locations are typically expected by the source; requires and such depend on them being correct. If load path points at &lt;home&gt; normally, pointing it at &lt;home&gt;/foo instead would likely cause requires in baz to fail. So we can reasonably expect that the load path structure is a good representation of a unique class name, and that execution would not expect something more unique.\r\n\r\nTherefore, subpath within load path is a good enough indicator of package for the compiled class.\r\n\r\nHowever load path searching should still be done. If we switch to foo/bar and try to require baz, it should continue to load. If we try to run baz directly, it should continue to load.\r\n\r\nTherefore, we should continue to use load path searching as the primary mechanism for finding the compiled class file.\r\nTherefore, we should also examine the class file directly for the contained class name, rather than expecting it to match package structure.\r\n\r\nGiven that compilation may happen from any arbitrary directory...\r\n\r\nWe need a way to determine the appropriate load path for a file under compilation. Because load paths may differ at runtime for the script/app in question, we should do two things:\r\n\r\n* provide a command-line means to specify the base dir from which the source is being compiled. This is similar to the requirement in .java files to specify a host dir that represents the \"root\" of the path.\r\n* default to current directory as the \"root\" of the path, if the filename to be compiled does not contain relative path modifiers and is a subpath under the current directory\r\n* if no base is given and there are relative modifiers in the full file path, generate a package name based on the full canonical filename. Perhaps print a warning.\r\n\r\nAddendums:\r\n\r\n* For any given file that must use a canonical path containing a device name to generate package name, the device indicator (C:\\, \\\\somehost\\, etc) will be considered the root and omitted from the resulting package.\r\n\r\nA few cases:\r\n\r\n1. simple case\r\n:current dir: C:\\home\r\n:file to compile C:\\home\\foo\\bar\\baz.rb, specified as \"foo\\bar\\baz.rb\"\r\n:no basedir specified\r\n\r\n* filename given has no relative modifiers\r\n* filename is within a subpath of current directory\r\n* package generated is \"foo.bar\"\r\n* baz.class file placed in C:\\home\\foo\\bar\\baz.class\r\n\r\n2.\r\n:current dir: C:\\home2\r\n:file to compile C:\\home\\foo\\bar\\baz.rb, specified as \"..\\home\\foo\\bar\\baz.rb\"\r\n:no basedir specified\r\n\r\n* filename has relative elements\r\n* canonical path is \"C:\\home\\foo\\bar\\baz.rb\"\r\n* package generated is \"home.foo.bar\"\r\n\r\n3.\r\n:current dir: C:\\home2\r\n:file to compile: C:\\home\\foo\\bar\\baz.rb, specified as \"C:\\home\\foo\\bar\\baz.rb\"\r\n:basedir: C:\\home\r\n\r\n* basedir is specified\r\n* target file is in a subpath of basedir with no relative modifiers\r\n* package and result same as in (1)\r\n\r\nExecution cases that should succeed to load baz.class, given any of the results above\r\n\r\n1.\r\n:load path contains C:\\home\r\n:jruby -e \"require 'baz'\"\r\n\r\n2.\r\n:load path contains C:\\home2\r\n:current dir is C:\\home2\r\n:jruby -e \"require '../home/foo/bar/baz\"\r\n\r\n3.\r\n:current dir is C:\\home2\r\n:jruby ../home/foo/bar/baz.class\r\n","created_at":"2008-08-12T21:04:51Z","content_type":"application/vnd.com.kenai.page.revision+json"}