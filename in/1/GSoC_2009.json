{"href":"https://kenai.com/api/projects/jruby/features/wiki/pages/GSoC_2009/revisions/1.json","name":"GSoC_2009","number":1,"page_href":"https://kenai.com/api/projects/jruby/features/wiki/pages/GSoC_2009.json","person":"headius","description":"updating from wiki.jruby.org","text":"Google Summer of Code 2009 is coming soon! The call for submissions will be opening soon, so start thinking about what you'd like to propose.\n\nQuestion: Which organization is JRuby participating under?\n\nHere's some ideas to get you started:\n\n* Nokogiri JRuby support (maybe too short, since it's mostly done)\n* Other native libs people are using?\n** win32ole, probably using JACOB or similar COM bridge\n** win32, using FFI\n* Android/JavaME/embedded JRuby APIs, performance, build tools, etc\n* \"Small footprint\" JRuby for applets and things; relates to previous item\n* ParseTree-compatible API built into JRuby\n** What happened to JParseTree?\n*** JParseTree was a great effort, and got pretty far toward supporting PT, even running many of its tests. And it may still have a lot of useful code. Unfortunately it has decayed, and probably would need a lot of work. It also tried to do everything without JRuby modifications, which in many cases made it a much harder job. We are perfectly willing to add extensions to JRuby to support any future PT attempts. ([[User:Headius|Headius]])\n* JVM bytecode-based debugger (like JDB) for Ruby code running under JRuby; integration with IDEs, etc\n* Compiler work: type inference, SSA/CPS transform + optimizations, gradual typing\n* Java integration: improving the layer between Ruby and Java\n* Java 7/MLVM work: integrating tail call optimizations, interface injection, dynamic calls, and more\n","created_at":"2009-03-21T19:58:58Z","content_type":"application/vnd.com.kenai.page.revision+json"}