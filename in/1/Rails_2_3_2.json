{"href":"https://kenai.com/api/projects/jruby/features/wiki/pages/Rails_2_3_2/revisions/1.json","name":"Rails_2_3_2","number":1,"page_href":"https://kenai.com/api/projects/jruby/features/wiki/pages/Rails_2_3_2.json","person":"looselytyped","description":"","text":"==English==\n\nHello all,\nSince Rails 2.3.2 update, certain problems may arise with Ruby using Tomcat or Glassfish, when deploying a production Rails app. To make it short, these problems are in the area of sessions management. \n\nDatabase sessions must be activated since Rails 2.3.2 with JRuby. In the file initializers/session_store.rb, you have to uncomment the line  ActionController::Base.session_store = :active_record_store.\n\nThen, as suggested, execute the following Rake commands:\nrake db:sessions:create\nrake db:migrate\n\nThis is necessary to deploy the tables which manage sessions.\nAfter having performed a \u00ab warble config \u00bb, it is necessary to add this line:\nconfig.webxml.jruby.session_store = 'db'\nIt will inform the Java container that we want to use database sessions. This line will only modify the file WEB-INF/web.xml\n\nFinally we need to us a little hack. In the file environment.rb, just above the line \"Rails::Initializer.run do |config|\", add the following code: \n  if defined?(JRUBY_VERSION)\n    # hack to fix jruby-rack's incompatibility with rails edge\n    module ActionController\n      module Session\n        class JavaServletStore\n          def initialize(app, options={}); end\n          def call(env); end\n        end\n      end\n    end\n  end\n\nThat's all !\n\n==Fran\u00e7ais==\n\nBonjour \u00e0 tous,\nDepuis la mise \u00e0 jour de rails en 2.3.2, lors du d\u00e9ploiement d\u2019une application rails en production avec JRUBY sur Tomcat ou glassish, certains probl\u00e8mes se pr\u00e9sentent. Pour faire court, c\u2019est la gestion des sessions qui pose probl\u00e8me.\nJe vous fais profiter de mon retour car j\u2019ai un peu gal\u00e9rer pour trouver de la doc dessus.\n\nDonc, depuis la version 2.3.2 de rails pour une mise en production avec JRUBY, il faut activer les sessions en base de donn\u00e9es.\n\nDans le fichier initializers/session_store.rb, il faut d\u00e9commenter la ligne\nActionController::Base.session_store = :active_record_store\n\n\nPuis, comme sug\u00e9r\u00e9, ex\u00e9cuter les commandes rake suivantes :\nrake db:sessions:create\nrake db:migrate\nCeci, afin de d\u00e9ployer les tables n\u00e9cessaires \u00e0 la gestion des sessions.\n\n\nApr\u00e8s avoir fait un \u00ab warble config \u00bb, il est n\u00e9cessaire d\u2019ajouter la ligne :\nconfig.webxml.jruby.session_store = 'db'\n\nCeci dans le but, d\u2019informer le container java que l\u2019on d\u00e9sire utiliser les sessions en base. Cette ligne aura simplement pour effet de modifier le fichier WEB-INF/web.xml\n\n\nPuis utiliser un petit hack. Dans le fichier environment.rb, au dessus de la ligne \"Rails::Initializer.run do |config|\", mettre :\n  if defined?(JRUBY_VERSION)\n    # hack to fix jruby-rack's incompatibility with rails edge\n    module ActionController\n      module Session\n        class JavaServletStore\n          def initialize(app, options={}); end\n          def call(env); end\n        end\n      end\n    end\n  end\n\nVoil\u00e0 !\n","created_at":"2009-03-24T22:27:23Z","content_type":"application/vnd.com.kenai.page.revision+json"}